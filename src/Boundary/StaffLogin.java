package Boundary;

import java.awt.Color;
import java.util.Scanner;
import Control.DoctorManager;
import Control.StaffManager;
import Entity.MedRecord;
import Entity.TreatmentAppointment;
import adt.Queue;


/**
 *
 * @author tanjixian
 */
public class StaffLogin extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    // Variable
    int choice = 0;     // Used for menu navigation
    Scanner scanner  = new Scanner(System.in);
    DoctorManager docManager;
    StaffManager staffManager;
    Queue<TreatmentAppointment> treatmentQueue;
    Queue<MedRecord> medCollectQueue;
    ConsultationUI consultUI;
    TreatmentUI treatmentUI;
    PharmacyUI pharUI;
    PatientManagementUI patientUI;
    StaffManagementUI staffUI;
    public String login;        // Used to identify the position type logging in
    public String currID;       // Temporal field for storing ID
    
    // Constructor
    public StaffLogin(DoctorManager docManager, StaffManager staffManager, Queue<TreatmentAppointment> treatmentQueue, Queue<MedRecord> medCollectQueue, ConsultationUI consultUI, TreatmentUI treatmentUI, PharmacyUI pharUI, PatientManagementUI patientUI, StaffManagementUI staffUI) {
        initComponents();
        this.setLocationRelativeTo(null); // to center the popup in middle
        this.docManager = docManager;
        this.staffManager = staffManager;
        this.treatmentQueue = treatmentQueue;
        this.medCollectQueue = medCollectQueue;
        this.consultUI = consultUI;
        this.treatmentUI = treatmentUI;
        this.pharUI = pharUI;
        this.patientUI = patientUI;
        this.staffUI = staffUI;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        loginTitle = new javax.swing.JLabel();
        loginSubTitle = new javax.swing.JLabel();
        userID = new javax.swing.JLabel();
        password = new javax.swing.JLabel();
        UserID = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        loginbutton = new javax.swing.JButton();
        UserPassword = new javax.swing.JPasswordField();
        userGuide = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(68, 73, 87));

        loginTitle.setBackground(new java.awt.Color(255, 255, 255));
        loginTitle.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        loginTitle.setForeground(new java.awt.Color(255, 255, 255));
        loginTitle.setText("Log In");

        loginSubTitle.setBackground(new java.awt.Color(255, 255, 255));
        loginSubTitle.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        loginSubTitle.setForeground(new java.awt.Color(204, 204, 204));
        loginSubTitle.setText("Staff Management");

        userID.setBackground(new java.awt.Color(255, 255, 255));
        userID.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        userID.setForeground(new java.awt.Color(255, 255, 255));
        userID.setText("User ID:");

        password.setBackground(new java.awt.Color(255, 255, 255));
        password.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        password.setForeground(new java.awt.Color(255, 255, 255));
        password.setText("Password:");

        UserID.setToolTipText("e.g. D for Doctor, N for Nurse, A for Admin");
        UserID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserIDActionPerformed(evt);
            }
        });

        loginbutton.setBackground(new java.awt.Color(20, 22, 27));
        loginbutton.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        loginbutton.setForeground(new java.awt.Color(255, 255, 255));
        loginbutton.setText("Log in");
        loginbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginbuttonActionPerformed(evt);
            }
        });

        UserPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserPasswordActionPerformed(evt);
            }
        });

        userGuide.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        userGuide.setForeground(new java.awt.Color(68, 73, 87));
        userGuide.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(loginbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginTitle)
                            .addComponent(loginSubTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userGuide, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(userID, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UserID, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(342, 342, 342))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(password)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(UserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(340, 340, 340))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(loginTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loginSubTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userID)
                    .addComponent(UserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password)
                    .addComponent(UserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userGuide)
                .addGap(8, 8, 8)
                .addComponent(loginbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        loginbutton.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>                        

    private void loginbuttonActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        if(checkLogin()){
            javax.swing.Timer timer = new javax.swing.Timer(500, e -> {
                dispose();
            });
            timer.setRepeats(false); // only run once so that it doesn't get stuck
            timer.start();
            
            staffLogin(treatmentQueue, medCollectQueue, consultUI, treatmentUI, pharUI, patientUI, staffUI);
        }
    }                                           

    private void UserIDActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    private void UserPasswordActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    // Used in loginButtonActionPerformed    
    private boolean checkLogin() {
        String id = UserID.getText();
        String password = new String(UserPassword.getPassword());
        String position = getPosition(id).trim().toUpperCase();

        if (!idFormat(id)) {
            userGuide.setText("User ID must be in the correct format e.g. D0001.");
            userGuide.setForeground(Color.RED);
            return false;
        }

        currID = id;

        // If staff not found
        if (staffManager.findStaff(id) == null) {
            userGuide.setText("ID not found!");
            userGuide.setForeground(Color.RED);
            return false;
        }

        // Verify credentials
        if (id.equalsIgnoreCase(staffManager.findStaff(id).getID()) && password.equalsIgnoreCase(staffManager.findStaff(id).getPassword())) {
            userGuide.setText("Login Successful!");
            userGuide.setForeground(Color.GREEN);
            login = position;
            return true;
        } else {
            userGuide.setText("Invalid Password.");
            userGuide.setForeground(Color.RED);
            return false;
        }
    }

   // HELPER FUNCTION
    // Login Menu Navigator
    public void staffLogin(Queue<TreatmentAppointment> treatmentQueue, Queue<MedRecord> medCollectQueue, ConsultationUI consultUI, TreatmentUI treatmentUI, PharmacyUI pharUI, PatientManagementUI patientUI, StaffManagementUI staffUI){
        switch(login){
            case "ADMIN" -> adminMenu(currID, treatmentQueue, medCollectQueue, consultUI, treatmentUI, pharUI, patientUI, staffUI);
            case "DOCTOR" -> doctorMenu(currID, treatmentQueue, medCollectQueue, consultUI, treatmentUI, pharUI, staffUI);
            case "NURSE" -> nurseMenu(currID, treatmentQueue, medCollectQueue, consultUI, pharUI, patientUI, staffUI);
        }           
    }
    
    // Check Correct ID format using REGEX
    private boolean idFormat(String id){
        return id.matches("^[ADN]\\d{4}$");
    }
    
    // Get the position of a id
    private String getPosition(String id){
        return switch(id.charAt(0)){
            case 'A' -> "ADMIN";
            case 'N' -> "NURSE";
            case 'D' -> "DOCTOR";     
            default -> "UNKNOWN";
        };
    }
   
   // MENU
    // Menu Title
    public void printTitle(String position, String name){
        String title = "Clinic Management System";
        int center = (35 + title.length()) / 2;
        System.out.println("WELCOME (" + position + ") " + name);
        System.out.println("\n===================================");
        System.out.printf("%" + center + "s\n", title);
        System.out.println("===================================");
    }
    
    // Menu for ADMIN
    public void adminMenu(String userID, Queue<TreatmentAppointment> treatmentQueue, Queue<MedRecord> medCollectQueue, ConsultationUI consultUI, TreatmentUI treatmentUI, PharmacyUI pharUI, PatientManagementUI patientUI, StaffManagementUI staffUI){
        while (choice < 1 && choice > 5){ // Repeat the step if the user input invalid choice
            printTitle("DOCTOR", staffManager.findStaff(userID).getName());
            System.out.println("1. Consultation System");
            System.out.println("2. Treatment System");
            System.out.println("3. Pharmacy System (Read-Only)");
            System.out.println("4. Patient Registration System");
            System.out.println("5. Staff Management System");
            System.out.println("6. Exit");   
            System.out.println("===============================");
            
            System.out.println("Enter your choice: ");
            choice = scanner.nextInt();

            switch(choice){
                case 1 -> {                 
                    System.out.println("Treatment queue: " + treatmentQueue.size());
                    System.out.println("Med Collection queue: " + medCollectQueue.size());
                    consultUI.consultMainMenu(); }// Consultation System
                case 2 -> treatmentUI.treatmentMenu(); // Treatment System
                case 3 -> pharUI.pharmacyMenu(); // Pharmacy System (READ_ONLY)
                case 4 -> patientUI.patientMenu();
                case 5 -> staffUI.staffMenu(); // Staff Management System
                case 6 -> { // Exit
                    System.out.println("\nThank you for using Doctor Management System");
                    return;
                }
                default -> System.out.printf("\nInvalid choice entered. Please choose again.");
            }
        }
    }
    
    // Menu for DOCTOR
    public void doctorMenu(String userID, Queue<TreatmentAppointment> treatmentQueue, Queue<MedRecord> medCollectQueue, ConsultationUI consultUI, TreatmentUI treatmentUI, PharmacyUI pharUI, StaffManagementUI staffUI){
        while (choice < 1 && choice > 5){ // Repeat the step if the user input invalid choice
            printTitle("DOCTOR", staffManager.findStaff(userID).getName());
            System.out.println("1. Consultation System");
            System.out.println("2. Treatment System");
            System.out.println("3. Pharmacy System (Read-Only)");
            System.out.println("4. Staff Management System");
            System.out.println("5. Exit");   
            System.out.println("===============================");
            
            System.out.println("Enter your choice: ");
            choice = scanner.nextInt();

            switch(choice){
                case 1 -> {                 
                    System.out.println("Treatment queue: " + treatmentQueue.size());
                    System.out.println("Med Collection queue: " + medCollectQueue.size());
                    consultUI.consultMainMenu(); }// Consultation System
                case 2 -> treatmentUI.treatmentMenu(); // Treatment System
                case 3 -> pharUI.pharmacyMenu(); // Pharmacy System (READ_ONLY)
                case 4 -> staffUI.staffMenu(); // Staff Management System
                case 5 -> { // Exit
                    System.out.println("\nThank you for using Doctor Management System");
                    return;
                }
                default -> System.out.printf("\nInvalid choice entered. Please choose again.");
            }
            
        } // End of While Loop
    }
    
    // Menu for NURSE
        public void nurseMenu(String userID, Queue<TreatmentAppointment> treatmentQueue, Queue<MedRecord> medCollectQueue, ConsultationUI consultUI, PharmacyUI pharUI, PatientManagementUI patientUI, StaffManagementUI staffUI){
        while (choice < 1 && choice > 5){ // Repeat the step if the user input invalid choice
            printTitle("DOCTOR", staffManager.findStaff(userID).getName());
            System.out.println("1. Consultation System");
            System.out.println("2. Pharmacy Control System");
            System.out.println("3. Patient Registration System");
            System.out.println("4. Staff Management System");
            System.out.println("5. Exit");   
            System.out.println("===============================");
            
            System.out.println("Enter your choice: ");
            choice = scanner.nextInt();

            switch(choice){
                case 1 -> {                 
                    System.out.println("Treatment queue: " + treatmentQueue.size());
                    System.out.println("Med Collection queue: " + medCollectQueue.size());
                    consultUI.consultMainMenu(); }// Consultation System
                case 2 -> pharUI.pharmacyMenu(); // Pharmacy System 
                case 3 -> patientUI.patientMenu();
                case 4 -> staffUI.staffMenu(); // Staff Management System
                case 5 -> { // Exit
                    System.out.println("\nThank you for using Doctor Management System");
                    return;
                }
                default -> System.out.printf("\nInvalid choice entered. Please choose again.");
            }
        } // End of While Loop
    }
        
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify                     
    private javax.swing.JTextField UserID;
    private javax.swing.JPasswordField UserPassword;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel loginSubTitle;
    private javax.swing.JLabel loginTitle;
    private javax.swing.JButton loginbutton;
    private javax.swing.JLabel password;
    private javax.swing.JLabel userGuide;
    private javax.swing.JLabel userID;
    // End of variables declaration                   
}